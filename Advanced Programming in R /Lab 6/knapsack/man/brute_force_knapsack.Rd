% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knapsack_brute_force.R
\name{brute_force_knapsack}
\alias{brute_force_knapsack}
\title{The knapsack problem: brute force algorithm.}
\usage{
brute_force_knapsack(x, W, parallel = FALSE, fast = FALSE)
}
\arguments{
\item{x}{an object of class data.frame with two variables v (values) and w (weights).}

\item{W}{numeric scalar object that represents the knapsack size.}

\item{parallel}{make the function run in parallel.}

\item{fast}{uses a c++ function for faster execution.}
}
\value{
\code{brute_force_knapsack} returns a list with two elements: the elements added to the knapsack and the maximum knapsack value.
}
\description{
The knapsack problem is a discrete optimization problem where we have a knapsack that can take a 
limited weight W and we want to fill this knapsack with a number of items i = 1,...,n, each with 
a weight w(i) and a value v(i). The goal is to find the knapsack with the largest value of the 
elements added to the knapsack.
}
\details{
\code{brute_force_knapsack} uses the brute-force algorithm. This algorithms works by going through
all possible alternatives (all possible combinations 2n are evaluated) and return the maximum
value found.
}
\section{Functions}{
\itemize{
\item \code{brute_force_knapsack}: Description in main function.
}}

\examples{
knapsack_objects <- generate_knapsack()
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack(x = knapsack_objects[1:12,], W = 3500)
brute_force_knapsack(x = knapsack_objects[1:8,], W = 2000)
brute_force_knapsack(x = knapsack_objects[1:12,], W = 2000)
brute_force_knapsack(x = knapsack_objects[1:12,], W = 3500, parallel=TRUE)

}
\references{
\url{https://en.wikipedia.org/wiki/Knapsack_problem}
}
